worker_processes 1;

events {
    worker_connections 1024;
}

http {
    lua_shared_dict keys 10m;  # Shared memory to store API keys

    server {
        listen 8080;
        server_name localhost;

        # Location for generating new keys (for testing purposes)
        location /generate_key {
            content_by_lua_block {
                local cjson = require "cjson"
                local keys_dict = ngx.shared.keys
                local uuid = require "resty.random".uuid
                local new_key = uuid()  -- Generate a unique API key (UUID)

                -- Store the key in shared memory for 1 hour (3600 seconds)
                keys_dict:set(new_key, true, 3600)

                -- Return the generated key in JSON format
                ngx.header.content_type = 'application/json'
                ngx.say(cjson.encode({ status = "success", api_key = new_key }))
            }
        }

        # Location for validating API keys
        location /validate_key {
            content_by_lua_block {
                local cjson = require "cjson"
                local keys_dict = ngx.shared.keys
                local api_key = ngx.var.arg_key  -- Get the API key from the query parameter

                -- Check if the API key exists in the shared memory
                if not api_key or not keys_dict:get(api_key) then
                    ngx.status = 401  -- Unauthorized
                    ngx.say(cjson.encode({ status = "error", message = "Invalid or expired API key" }))
                else
                    ngx.say(cjson.encode({ status = "success", message = "Valid API key" }))
                end
            }
        }
    }
}
